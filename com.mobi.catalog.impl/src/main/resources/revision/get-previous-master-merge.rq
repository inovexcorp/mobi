PREFIX mcat: <http://mobi.com/ontologies/catalog#>
PREFIX prov: <http://www.w3.org/ns/prov#>

SELECT DISTINCT ?parent
WHERE {
    {
        SELECT ?parent ?time
        WHERE {
            {
                # Retrieves the previous merge of master into another branch
                ?commit a mcat:Commit ;
                    (mcat:auxiliaryCommit | mcat:baseCommit)+ ?other .

                ?other mcat:auxiliaryCommit ?parent .
            }
            UNION
            {
                # Retrieves the previous merge of master into another branch for the merge commit itself
                ?commit a mcat:Commit ;
                    mcat:auxiliaryCommit ?parent .
            }
            UNION
            {
                # Retrieves the branching commit off of master
                ?commit a mcat:Commit ;
                    mcat:baseCommit+ ?directMasterParent .
                BIND(?directMasterParent as ?parent)
                {
                    SELECT ?directMasterParent ?time
                    WHERE {
                        {
                            ?masterHead a mcat:Commit ;
                                mcat:baseCommit+ ?directMasterParent .
                            ?directMasterParent prov:atTime ?time .
                        } UNION {
                            ?masterHead a mcat:Commit ;
                                prov:atTime ?time .
                            BIND(?masterHead as ?parent)
                        }
                    }
                    ORDER BY DESC(?time)
                }
            }
            UNION
            {
                # Get last shared commit in commit chain that exists in master
                ?commitParent prov:atTime ?time .
                FILTER (?commitParent = ?parent)
                BIND(?commitParent as ?parent)
                {
                    SELECT ?commitParent
                    WHERE {
                        ?commit mcat:baseCommit+ ?commitParent
                    }
                }
            }

            {
                # Get all commits in master
                SELECT ?parent ?time
                WHERE {
                    {
                        ?masterHead a mcat:Commit ;
                            (mcat:baseCommit|mcat:auxiliaryCommit)+ ?parent .
                        ?parent prov:atTime ?time .
                    } UNION {
                        ?masterHead a mcat:Commit ;
                            prov:atTime ?time .
                        BIND(?masterHead as ?parent)
                    }
                }
                ORDER BY DESC(?time)
            }
            # Filter to make sure the master commit being pulled back isn't only in master because this commit got merged
            ?masterHead (mcat:baseCommit|mcat:auxiliaryCommit)+ ?masterCommit .
            ?masterCommit (mcat:baseCommit|mcat:auxiliaryCommit)+ ?parent .
            OPTIONAL {
                ?masterHead mcat:baseCommit+ ?parent .
                BIND(true as ?direct)
            }
            FILTER (
                IF(BOUND(?direct),
                    true,
                    NOT EXISTS {
                       ?masterCommit (mcat:baseCommit|mcat:auxiliaryCommit)+ ?commit .
                    }
                )
            )
            FILTER (
                IF(BOUND(?direct),
                    true,
                    (?masterCommit != ?commit)
                )
            )
            FILTER NOT EXISTS {
                ?commit (mcat:baseCommit|mcat:auxiliaryCommit)+ ?masterCommit .
            }
        }
    }
    UNION
    {
        ?commit prov:generated/prov:wasDerivedFrom ?revision .
        ?parent mcat:masterMergeIntoBranchRevision ?revision ;
            prov:atTime ?time .
    }
}
ORDER BY DESC(?time)
LIMIT 1